#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART I: config for the image and text/w image CEs					#
#####################################################################

## include the plugin class ##

includeLibs.tx_damlightbox_pi1 = EXT:damlightbox/pi1/class.tx_damlightbox_pi1.php

## basic setup ##

plugin.tx_damlightbox_pi1 = USER
plugin.tx_damlightbox_pi1 {

	userFunc = tx_damlightbox_pi1->main
	debugData = {$plugin.damlightbox.debugData}

	select {
			damFields = {$plugin.damlightbox.damFields}
			mmTable = {$plugin.damlightbox.mmTable}
			foreignTable = {$plugin.damlightbox.foreignTable}
			whereClause = {$plugin.damlightbox.whereClause}
			whereClause.insertData = 1
			sorting = {$plugin.damlightbox.sorting}
	}

	settings {
		maxW = {$plugin.damlightbox.maxW}
		maxH = {$plugin.damlightbox.maxH}
	}

	config {
		sDEF {
			imgPreview = {$plugin.damlightbox.imgPreview}
			imgCaption = {$plugin.damlightbox.imgCaption}
			showCopyright = {$plugin.damlightbox.showCopyright}
		}

		sLIGHTBOX {
			lbCaption = {$plugin.damlightbox.lbCaption}
		}
	}
}


## DAM metadata ist written to $GLOBALS[TSFE]->register['tx_damlightbox']['metaData'][$i][ENTER_YOUR_FIELDNAME_HERE] ##
## By using this temporary TS object the values are fetched from this array ##

temp.getDAMvalues = TEXT
temp.getDAMvalues {
	wrap = {|}
	cObject = TEXT
	cObject {
		value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|ENTER_YOUR_FIELDNAME_HERE
		insertData = 1
	}
	insertData = 1
	htmlSpecialChars = 1
}


## set first image as preview if selected ##

tt_content.image.20.imgList {

	override.if {
		value = 1
		equals.data = TSFE:register|tx_damlightbox|config|sDEF|imgPreview
	}
	override.cObject = TEXT
	override.cObject {
		wrap = |
		cObject	< tt_content.image.20.imgList.cObject
		listNum = 0
	}
}


## configuration of the class call to fetch the DAM data into TSFE ##

tt_content.image.15 =< plugin.tx_damlightbox_pi1
tt_content.textpic.15 =< plugin.tx_damlightbox_pi1

## configure image CEs for DAM data ##

tt_content.image.20 {

	## cases when imageLinkWrap will be enabled ##
	1.imageLinkWrap.enable >
	1.imageLinkWrap.enable.cObject = COA
	1.imageLinkWrap.enable.cObject {

			## normal links
			10 = TEXT
			10.value = 1
			10.if.isTrue.field = image_link

			## click-enlarge
			20 < .10
			20.if.isTrue.field = image_zoom

			## image preview
			30 < .10
			30.if.isTrue >
			30.if.value = 1
			30.if.equals.data = TSFE:register|tx_damlightbox|config|sDEF|imgPreview
	}

	## typolink configuration ##
	1.imageLinkWrap.typolink {


		## unset old param object ##
		parameter >

		## if image_link field is filled ##
		parameter {
			field = image_link
			#listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
			listNum >
		}

		## if image_link field is not filled, link to the current id ##
		parameter.override {
			cObject = TEXT
			cObject.data = TSFE:id

			stdWrap.if.isFalse.field = image_link
			stdWrap.if.isTrue.data = field:image_zoom // TSFE:register|tx_damlightbox|config|sDEF|imgPreview
		}

		## append the parameters for the lightbox page ##
		parameter.append = TEXT
		parameter.append {
			if.isFalse.field = image_link
			value = {$plugin.damlightbox.jsParams}
			noTrimWrap = | ||
		}

		additionalParams.cObject = TEXT
		additionalParams.cObject {
			htmlspecialchars = 1
			dataWrap = |&type=313&content={field:uid}&img={register:IMAGE_NUM_CURRENT}
			if.isFalse.field = image_link
		}

		ATagParams.cObject = TEXT
		ATagParams.cObject {
			value = {$plugin.damlightbox.imageLinkAttributes}
			if.isFalse.field = image_link
		}
	}

	## new title and alt text objects with metadata but can be overidden with standard fields ##
	1.titleText >
	1.titleText {
		stripHTML = 1
		cObject < temp.getDAMvalues
		cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|title
		override {
			if.isTrue.field = titleText
			cObject {
				field = titleText
				split.token.char = 10
				split.returnKey.data = register:IMAGE_NUM_CURRENT
			}
		}
	}

	1.altText >
	1.altText {
		stripHTML = 1
		cObject < temp.getDAMvalues
		cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|alt_text
		override {
			if.isTrue.field = altText
			cObject {
				field = altText
				split.token.char = 10
				split.returnKey.data = register:IMAGE_NUM_CURRENT
			}
		}
	}

	## metadata inserted into the caption; this COA might easily be modified to your needs, depending what you want to show ##
	caption = COA
	caption {

		1 >

		## if selected first insert the copyright notice ##
		10 < temp.getDAMvalues
		10 {
			cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|copyright
			if.isTrue.data = TSFE:register|tx_damlightbox|config|sDEF|showCopyright
			outerWrap = {$plugin.damlightbox.copyrightWrap}
		}

		## now insert the caption from DAM but this might be overriden by the normal caption field ##
		20 = COA
		20 {

			## insert the selected field ##
			10 < temp.getDAMvalues
			10 {
				cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|{TSFE:register|tx_damlightbox|config|sDEF|imgCaption}
				if.isFalse.field = imagecaption
			}

			## insert field:imagecaption if used; overrides all other settings ##
			99 = TEXT
			99 {
				field = imagecaption
				required = 1
				parseFunc =< lib.parseFunc
				br=1
				split {
					token.char = 10
					token.if.isPositive = {$styles.content.imgtext.imageTextSplit} + {$styles.content.imgtext.captionSplit}
					returnKey.data = register:IMAGE_NUM_CURRENT
				}
			}
		}
	}
}

#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART II: config for click-enlarge (pagetype = 313)				#
#####################################################################

## this is the basic configuration; if none of the compatible lightbox extensions is installed, the page will be opened in a 'classic' popup window ##

damlightbox = PAGE
damlightbox.typeNum = 313
damlightbox {

	## additional config that takes precedence over the general config object
	config {
		no_cache = 1
	}

	## standard CSS file
	includeCSS.file1 = {$plugin.damlightbox.cssFile}
	includeCSS.file1.media = screen

	## body tag
	bodyTagCObject =< page.bodyTagCObject

	# page object
	10 = COA
	10 {
		## fetch the current record from DB and render the imagefield ##
		10 = CONTENT
		10 {
			table = tt_content
			select {
				orderBy = sorting
				andWhere {
					data = GPvar:content
					intval = 1
					wrap = uid=|
				}
			}

			renderObj = COA
			renderObj {

				## write DAM data into TSFE
				5 =< plugin.tx_damlightbox_pi1

				## load registers for all images, last image in stack and current image; this will be used for the imagebrowser if it's not opened with a lightbox ##
				10 = LOAD_REGISTER
				10 {

					## this register fetches the last number from stack ##
					lastImg {
						data = TSFE:register|tx_damlightbox|imgCount
						listNum = last
					}

					## this register points to the current image by checking the img=imagenumber parameter ##
					currentImg {
						data = TSFE:register|tx_damlightbox|imgCount
						listNum.stdWrap.cObject = TEXT
						listNum.stdWrap.cObject.data = GPvar:img
						listNum.stdWrap.cObject.data.intval = 1
					}
				}

				## the main output is done with a classic template object ##
				20 = TEMPLATE
				20 {
					template = FILE
					template.file = {$plugin.damlightbox.templateFile}

					workOnSubpart = CLICKENLARGE

					marks {

						## get the title for the record ##
						CE_TITLE = TEXT
						CE_TITLE.field = {$plugin.damlightbox.headerField}

						## render the imagebrowser (but only if there is more than one image) ##
						IMAGEBROWSER = COA
						IMAGEBROWSER {

							## check if there is only one image
							stdWrap.if {
								value = 0
								isGreaterThan.data = register:lastImg
							}

							wrap = {$plugin.damlightbox.imgBrowserWrap}

							## prev word: it's ONLY linked if we are not seeing first image
							10 = TEXT
							10.value = {$plugin.damlightbox.prevWord}
							10.override {

								if.value = 0
								if.isGreaterThan.data = GPvar:img
								if.isGreaterThan.data.intval = 1

								cObject = TEXT
								cObject.value = {$plugin.damlightbox.prevWord}
								cObject.typolink {

									parameter.data = page:uid
									additionalParams.cObject = COA
									additionalParams.cObject {

										stdWrap.dataWrap = &type=313&content={field:uid}&img=|
										stdWrap.htmlspecialchars = 1

										10 = LOAD_REGISTER
										10 {
											prevpic.cObject = COA
											prevpic.cObject {
												10 = TEXT
												10.dataWrap = {GPvar:img}-1
												10.intval = 1
											}
										}
										20 = TEXT
										20 {
											data = register:prevpic
											prioriCalc = intval
										}
									}
								}
							}

							## imagecount n / n ##
							20 = COA
							20.wrap = {$plugin.damlightbox.imgCountWrap}
							20 {
								10 = TEXT
								10 {
									cObject = TEXT
									cObject.dataWrap = {register:currentImg}+1
									prioriCalc = intval
									noTrimWrap = || / |
								}

								20 = TEXT
								20 {
									cObject = TEXT
									cObject.dataWrap = {register:lastImg}+1
									prioriCalc = intval
									wrap = |
								}
							}

							## next word: ONLY linked if we are not seeing last image ##
							30 = TEXT
							30.value = {$plugin.damlightbox.nextWord}
							30.override {

								if.value.data = register:lastImg
								if.isLessThan.data = register:currentImg

								cObject = TEXT
								cObject.value = {$plugin.damlightbox.nextWord}
								cObject.typolink {

									parameter.data = page:uid
									additionalParams.cObject = COA
									additionalParams.cObject {

										stdWrap.dataWrap = &type=313&content={field:uid}&img=|
										stdWrap.htmlspecialchars = 1

										10 = LOAD_REGISTER
										10 {
											nextpic.cObject = COA
											nextpic.cObject {
												10 = TEXT
												10.dataWrap = {GPvar:img}+1
												10.intval = 1
											}
										}
										20 = TEXT
										20 {
											data = register:nextpic
											prioriCalc = intval
										}
									}
								}
							}
						}

						## render current image from DAM ##
						DAM_IMAGE = COA
						DAM_IMAGE {

							10 = IMAGE
							10 {

								file {
									import.cObject < temp.getDAMvalues
									import.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|fullPath
									maxW = {$plugin.damlightbox.maxW}
									maxH = {$plugin.damlightbox.maxH}
								}

								altText.cObject < temp.getDAMvalues
								altText.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|alt_text

								titleText < temp.getDAMvalues
								titleText.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|title
							}
						}

						## fetch some other interesting metadata ##
						DAM_TITLE < temp.getDAMvalues
						DAM_TITLE {
							cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|title
							outerWrap = {$plugin.damlightbox.damTitleWrap}
						}

						DAM_COPYRIGHT < temp.getDAMvalues
						DAM_COPYRIGHT {
							cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|copyright
							outerWrap = {$plugin.damlightbox.copyrightWrap}
							outerWrap.if {
								isTrue.cObject < temp.getDAMvalues
								isTrue.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|copyright
							}
						}

						DAM_LOCATION < temp.getDAMvalues
						DAM_LOCATION {
							cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|file_orig_location
							outerWrap = {$plugin.damlightbox.damLocationWrap}
							outerWrap.if {
								isTrue.cObject < temp.getDAMvalues
								isTrue.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|file_orig_location
							}
						}

						DAM_DESCRIPTION < temp.getDAMvalues
						DAM_DESCRIPTION {
							cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|description
						}
					}
				}
			}
		}
	}
}