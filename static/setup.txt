#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART I: Basic TypoScript libraries and settings					#
#####################################################################

## include the plugin class ##

includeLibs.tx_damlightbox_pi1 = EXT:damlightbox/pi1/class.tx_damlightbox_pi1.php
includeLibs.tx_dam_tsfe = EXT:dam/lib/class.tx_dam_tsfe.php

## basic setup ##

plugin.tx_damlightbox_pi1 = USER
plugin.tx_damlightbox_pi1 {

	userFunc = tx_damlightbox_pi1->main
	debugData = {$plugin.damlightbox.debugData}

	select {
			damFields = {$plugin.damlightbox.damFields}
			
			## if needed you can explicitly configure the query, but normally this should be determined automatically ##
			mmTable = tx_dam_mm_ref
			# foreignTable =
			# whereClause =
			sorting = tx_dam_mm_ref.sorting_foreign				
	}

	settings {
		maxW = {$plugin.damlightbox.maxW}
		maxH = {$plugin.damlightbox.maxH}
	}

	config {
		sDEF {
			imgPreview = {$plugin.damlightbox.imgPreview}
			imgCaption = {$plugin.damlightbox.imgCaption}
			showCopyright = {$plugin.damlightbox.showCopyright}
		}

		sLIGHTBOX {
			lbCaption = {$plugin.damlightbox.lbCaption}
			setSpecificDimensions = 
		}
	}
}


## DAM metadata ist written to $GLOBALS[TSFE]->register['tx_damlightbox']['metaData'][$i][ENTER_YOUR_FIELDNAME_HERE] ##
## By using this TS library object values can be fetched from this array ##

lib.damlightbox {

	## library object to retrieve metadata values from TSFE ##
	getDAMvalues = TEXT
	getDAMvalues {
		wrap = {|}
		cObject = TEXT
		cObject {
			value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|ENTER_YOUR_FIELDNAME_HERE
			insertData = 1
		}
		insertData = 1
		htmlSpecialChars = 1
	}
	
	## load registers for last image in stack and current image ##
	imageRegisters = LOAD_REGISTER
	imageRegisters {
	
		## first image will always be "0" ##
	
		## this register fetches the last number from stack ##
		lastImg {
			data = TSFE:register|tx_damlightbox|imgCount
			listNum = last
		}
	
		## this register points to the current image by checking the img=imagenumber parameter ##
		currentImg {
			data = TSFE:register|tx_damlightbox|imgCount
			listNum.stdWrap.cObject = TEXT
			listNum.stdWrap.cObject.data = GPvar:img
		}
	}

	## html content for click enlargement - usable within a configured lightbox or the classic image popup ##
	clickEnlargeConf = COA
	clickEnlargeConf {
		
		## first execute the plugin ##
		5 =< plugin.tx_damlightbox_pi1
		
		## determine the image numbers ##
		10 =< lib.damlightbox.imageRegisters
	
		## for the popup/lightbox content a TEMPLATE object is used ##
		20 = TEMPLATE
		20 {
			template = FILE
			template.file = {$plugin.damlightbox.templateFile}
	
			workOnSubpart = CLICKENLARGE
	
			marks {
	
				## get the title for the record ##
				CE_TITLE = TEXT
				CE_TITLE.field = {$plugin.damlightbox.headerField}
	
				## render the imagebrowser (but only if there is more than one image) ##
				IMAGEBROWSER = COA
				IMAGEBROWSER {
	
					## check if there is only one image
					stdWrap.if {
						value = 0
						isGreaterThan.data = register:lastImg
					}
	
					wrap = {$plugin.damlightbox.imgBrowserWrap}
	
					## prev word: it's ONLY linked if we are not seeing first image
					10 = TEXT
					10.value = {$plugin.damlightbox.prevWord}
					10.override {
	
						if.value = 0
						if.isGreaterThan.data = GPvar:img
	
						cObject = TEXT
						cObject.value = {$plugin.damlightbox.prevWord}
						cObject.typolink {
	
							no_cache = 0
							useCacheHash = 1
	
							parameter.data = page:uid
							additionalParams.cObject = COA
							additionalParams.cObject {
	
								stdWrap.dataWrap = &type=313&content={GPvar:content}&img=|
								stdWrap.htmlspecialchars = 1
	
								10 = LOAD_REGISTER
								10 {
									prevpic.cObject = COA
									prevpic.cObject {
										10 = TEXT
										10.dataWrap = {GPvar:img}-1
									}
								}
								20 = TEXT
								20 {
									data = register:prevpic
									prioriCalc = intval
								}
							}
						}
					}
	
					## imagecount n / n ##
					20 = COA
					20.wrap = {$plugin.damlightbox.imgCountWrap}
					20 {
						10 = TEXT
						10 {
							cObject = TEXT
							cObject.dataWrap = {register:currentImg}+1
							prioriCalc = intval
							noTrimWrap = || / |
						}
	
						20 = TEXT
						20 {
							cObject = TEXT
							cObject.dataWrap = {register:lastImg}+1
							prioriCalc = intval
							wrap = |
						}
					}
	
					## next word: ONLY linked if we are not seeing last image ##
					30 = TEXT
					30.value = {$plugin.damlightbox.nextWord}
					30.override {
	
						if.value.data = register:lastImg
						if.isLessThan.data = register:currentImg
	
						cObject = TEXT
						cObject.value = {$plugin.damlightbox.nextWord}
						cObject.typolink {
	
							no_cache = 0
							useCacheHash = 1
	
							parameter.data = page:uid
							additionalParams.cObject = COA
							additionalParams.cObject {
	
								stdWrap.dataWrap = &type=313&content={GPvar:content}&img=|
								stdWrap.htmlspecialchars = 1
	
								10 = LOAD_REGISTER
								10 {
									nextpic.cObject = COA
									nextpic.cObject {
										10 = TEXT
										10.dataWrap = {GPvar:img}+1
									}
								}
								20 = TEXT
								20 {
									data = register:nextpic
									prioriCalc = intval
								}
							}
						}
					}
				}
	
				## render current image from DAM ##
				DAM_IMAGE = COA
				DAM_IMAGE {
	
					10 = IMAGE
					10 {
	
						file {
							import.cObject < lib.damlightbox.getDAMvalues
							import.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|fullPath
							maxW = {$plugin.damlightbox.maxW}
							maxH = {$plugin.damlightbox.maxH}
						}
	
						params = id="lbImage"
	
						altText < lib.damlightbox.getDAMvalues
						altText.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|alt_text
	
						titleText < lib.damlightbox.getDAMvalues
						titleText.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|title
					}
				}
	
				## fetch some other interesting metadata ##
				DAM_TITLE < lib.damlightbox.getDAMvalues
				DAM_TITLE {
					cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|title
					outerWrap = {$plugin.damlightbox.damTitleWrap}
				}
	
				DAM_COPYRIGHT < lib.damlightbox.getDAMvalues
				DAM_COPYRIGHT {
					cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|copyright
					outerWrap = {$plugin.damlightbox.copyrightWrap}
					outerWrap.if {
						isTrue.cObject < lib.damlightbox.getDAMvalues
						isTrue.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|copyright
					}
				}
	
				DAM_LOCATION < lib.damlightbox.getDAMvalues
				DAM_LOCATION {
					cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|file_orig_location
					outerWrap = {$plugin.damlightbox.damLocationWrap}
					outerWrap.if {
						isTrue.cObject < lib.damlightbox.getDAMvalues
						isTrue.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|file_orig_location
					}
				}
	
				DAM_DESCRIPTION < lib.damlightbox.getDAMvalues
				DAM_DESCRIPTION {
					cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|description
				}
			}
		}	
	}
}

#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART II: config for click-enlarge (pagetype = 313)				#
#####################################################################

## this is the basic configuration; if none of the compatible lightbox extensions is installed, the page will be opened in a 'classic' popup window ##

damlightbox = PAGE
damlightbox.typeNum = 313
damlightbox {

	# no standard pagetitle - will be fetched from DAM ##
	config.noPageTitle = 2

	## use the DAM title for the title tag of the popup; this will work because page content is generated before header content ##
	headerData.10 = TEXT
	headerData.10 {
		cObject < lib.damlightbox.getDAMvalues
		cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|title
		noTrimWrap = |	<title>|</title>|
	}

	## standard CSS file ##
	includeCSS.file1 = {$plugin.damlightbox.cssFile}
	includeCSS.file1.media = screen

	## body tag ##
	bodyTagCObject = TEXT
	bodyTagCObject.dataWrap = <body id="damlightbox-{GPvar:content}" class="damlightbox">|

	## page content ##	
	10 = COA
	10 {
		## fetch the current record from DB with a RECORDS object; this ensures that damlightbox always has the right table context ##
		10 = RECORDS
		10 {
			source.data = GPvar:content
			dontCheckPid = 1
		}
	}
}