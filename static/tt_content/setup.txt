#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART I: config for tt_content image and text/w image CEs			#
#####################################################################

plugin.tx_damlightbox_pi1.settings.fileUsage.getTables := addToList(tt_content)

## configuration of the class call to fetch the DAM data into TSFE ##

tt_content.image.15 =< plugin.tx_damlightbox_pi1
tt_content.textpic.15 =< plugin.tx_damlightbox_pi1

## prepare tt_content.image for damlightbox ##

tt_content.image.20.imgList {

	## image preview feature for tt_content images: just use the first image if the flag is set in DS ##
	override.if {
		value = 1
		equals.data = TSFE:register|tx_damlightbox|config|sDEF|imgPreview
	}
	override.cObject = TEXT
	override.cObject {
		wrap = |
		cObject	< tt_content.image.20.imgList.cObject
		listNum = 0
	}
}

tt_content.image.20.imgPath >
tt_content.image.20.imgPath =

## configure image CEs for DAM data ##

tt_content.image.20 {

	## cases when imageLinkWrap will be enabled ##
	1.imageLinkWrap.enable >
	1.imageLinkWrap.enable.cObject = COA
	1.imageLinkWrap.enable.cObject {

			## normal links
			10 = TEXT
			10.value = 1
			10.if.isTrue.field = image_link

			## click-enlarge
			20 < .10
			20.if.isTrue.field = image_zoom

			## image preview
			30 < .10
			30.if.isTrue >
			30.if.value = 1
			30.if.equals.data = TSFE:register|tx_damlightbox|config|sDEF|imgPreview
	}

	## typolink configuration ##
	1.imageLinkWrap.typolink {

		## unset old param object ##
		parameter >

		## caching ##
		no_cache = 0
		useCacheHash = 1

		## if image_link field is filled ##
		parameter.cObject = TEXT
		parameter.cObject {
			field = image_link
			listNum.stdWrap.data = register : IMAGE_NUM_CURRENT
		}

		## if image_link field is not filled, link to the current id ##
		parameter.override {
			cObject = TEXT
			cObject.data = TSFE:id
			stdWrap.if.isFalse.field = image_link
			stdWrap.if.isTrue.data = field:image_zoom
		}

		## append the parameters for the lightbox page ##
		parameter.append = TEXT
		parameter.append {
			if.isFalse.field = image_link
			value = {$plugin.damlightbox.jsParams}
			noTrimWrap = | ||
		}

		additionalParams.cObject = TEXT
		additionalParams.cObject {
			htmlspecialchars = 1
			dataWrap = |&type=313&content=tt_content_{field:uid}&img={register:IMAGE_NUM_CURRENT}
			if.isFalse.field = image_link
		}

		ATagParams.cObject = TEXT
		ATagParams.cObject {
			value = {$plugin.damlightbox.imageLinkAttributes}
			if.isFalse.field = image_link
		}
	}

	## new title and alt text objects with metadata but can be overidden with standard fields ##
	1.titleText >
	1.titleText.cObject = COA
	1.titleText.cObject {
		
		10 < lib.damlightbox.getDAMvalues
		10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|title
		10.if.isFalse.field = titleText
		
		20 = TEXT
		20 {
			if.isTrue.field = titleText
			field = titleText
			split.token.char = 10
			split.returnKey.data = register:IMAGE_NUM_CURRENT
		}
	}

	1.altText >
	1.altText.cObject = COA
	1.altText.cObject {
		
		10 < lib.damlightbox.getDAMvalues
		10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|alt_text
		10.if.isFalse.field = altText
		
		20 = TEXT
		20 {
			if.isTrue.field = altText
			field = altText
			split.token.char = 10
			split.returnKey.data = register:IMAGE_NUM_CURRENT
		}
	}

	## metadata inserted into the caption; this COA might easily be modified to your needs, depending what you want to show ##
	caption = COA
	caption {

		1 >

#		5 = TEXT
#		5.debugData = 1

		## if selected first insert the copyright notice ##
		10 < lib.damlightbox.getDAMvalues
		10 {
			cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|copyright
			if.isTrue.data = TSFE:register|tx_damlightbox|config|sDEF|showCopyright
			outerWrap = {$plugin.damlightbox.copyrightWrap}
		}

		## now insert the caption from DAM but this might be overriden by the normal caption field ##
		20 = COA
		20 {

			## insert the selected field ##
			10 < lib.damlightbox.getDAMvalues
			10 {
				cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|{TSFE:register|tx_damlightbox|config|sDEF|imgCaption}
				if.isFalse.field = imagecaption
			}

			## insert field:imagecaption if used; overrides all other settings ##
			99 = TEXT
			99 {
				field = imagecaption
				required = 1
				parseFunc =< lib.parseFunc
				br=1
				split {
					token.char = 10
					token.if.isPositive = {$styles.content.imgtext.imageTextSplit} + {$styles.content.imgtext.captionSplit}
					returnKey.data = register:IMAGE_NUM_CURRENT
				}
			}
		}
	}
}

#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART II: config for tt_content click-enlarge						#
#####################################################################

## register tt_content in the click-enlargement pagetype ##
damlightbox {
	10.10.tables := addToList(tt_content)
	10.10.conf.tt_content =< lib.damlightbox.clickEnlargeConf
}

#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART III: config for tt_content & d4u_slimbox						#
#####################################################################

[globalVar = LIT:d4u_slimbox = {$plugin.damlightbox.lightboxExtension}]

tt_content.image.20 {

	# clean stuff from d4u_slimbox
	1 {
		emptyTitleHandling >
		titleText >
		titleInLink = 0
		titleInLinkAndImg = 0
	}

	## modifications to the imageLinkWrap ##
	1.imageLinkWrap.typolink {

		parameter.append >
		parameter.listNum >

		ATagParams >
		ATagParams < lib.damlightbox.d4u_slimbox.imageLinkWrap.typolink.ATagParams
		ATagParams {
			cObject.10.hpixels.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|hpixels
			cObject.10.vpixels.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|vpixels
			cObject.10.lbCaption.cObject.10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|{TSFE:register|tx_damlightbox|config|sLIGHTBOX|lbCaption}
			cObject.10.fullPath.cObject.10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|fullPath
			cObject.15.data = register:IMAGE_NUM_CURRENT
			cObject.20.if.isFalse.field = image_link
		}
	}
	## if slimbox is used together with the preview function all imgs despite the first one need to be inserted into a hidden div ##
	stdWrap.postCObject = USER
	stdWrap.postCObject {
		userFunc = tx_damlightbox_lightbox->firstImageIsPreview

		lbCaption < tt_content.image.20.1.imageLinkWrap.typolink.ATagParams.cObject.10.lbCaption
		lbCaption.cObject.10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|{TSFE:register|tx_damlightbox|config|sLIGHTBOX|lbCaption}

		linkConfig {
			no_cache = 0
			useCacheHash = 1
			parameter.data = TSFE:id
			additionalParams.dataWrap = |&type=313&content=tt_content_{field:uid}&img={register:currentImg}
			ATagParams.dataWrap = rel="lightbox[sb{field:uid}]" rev="width={register:widthCalc}, height={register:heightCalc}, src={register:fullPath}" title="{register:lbCaption}"
		}

		hCalc.cObject = TEXT
		hCalc.cObject.value = {$plugin.damlightbox.d4u_slimbox.hCalc}
		vCalc.cObject = TEXT
		vCalc.cObject.value = {$plugin.damlightbox.d4u_slimbox.vCalc}
	}
}

damlightbox {
	10.10.conf.tt_content.20 {
		template.file = {$plugin.damlightbox.d4u_slimbox.templateFile}
		marks.CE_TITLE >
		marks.DAM_TITLE.outerWrap >
	}
}

[global]

#####################################################################
# TypoScrip configuration for the plugin.damlightbox_pi1			#
# @author Torsten Schrade <schradt@uni-mainz.de>					#
# PART IV: config for tt_content & perfectlightbox					#
#####################################################################

[globalVar = LIT:perfectlightbox = {$plugin.damlightbox.lightboxExtension}]

tt_content.image.20.1 {

	titleInLink = 0

	titleText.cObject.10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|{TSFE:register|tx_damlightbox|config|sLIGHTBOX|lbCaption}

	imageLinkWrap {

		directImageLink >
		JSwindow >
		width >
		height >
		effects >
		bodyTag >
		wrap >
		linkParams >
		typolink {
			additionalParams >
			ATagParams >
			ATagParams.cObject < tt_content.image.20.1.titleText.cObject
			ATagParams.wrap = title="|"
			parameter.append >
			parameter.override.cObject = IMG_RESOURCE
			parameter.override.cObject {
				file {
					import.cObject < lib.damlightbox.getDAMvalues
					import.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:IMAGE_NUM_CURRENT}|fullPath
					maxW = {$plugin.perfectlightbox.lightBoxMaxW}
					maxH = {$plugin.perfectlightbox.lightBoxMaxH}
				}
			}
		}
	}

	stdWrap.postCObject = USER
	stdWrap.postCObject {
		userFunc = tx_damlightbox_lightbox->firstImageIsPreview

		lbCaption < tt_content.image.20.1.titleText
		lbCaption.cObject.10.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|{TSFE:register|tx_damlightbox|config|sLIGHTBOX|lbCaption}

		linkConfig < tt_content.image.20.1.imageLinkWrap.typolink
		linkConfig.ATagParams >
		linkConfig.ATagParams.dataWrap = title="{register:lbCaption}"
		linkConfig.parameter.override.cObject.file.import.cObject.cObject.value = TSFE:register|tx_damlightbox|metaData|{register:currentImg}|fullPath

	}

}

[global]
